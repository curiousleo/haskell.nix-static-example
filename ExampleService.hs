{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!module ExampleService where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
 
data ExampleService request
     response = ExampleService{exampleServiceDo ::
                               request 'HsGRPC.Normal ExampleService.DoRequest
                                 ExampleService.DoResponse
                                 -> Hs.IO (response 'HsGRPC.Normal ExampleService.DoResponse)}
              deriving Hs.Generic
 
exampleServiceServer ::
                       ExampleService HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                         HsGRPC.ServiceOptions -> Hs.IO ()
exampleServiceServer
  ExampleService{exampleServiceDo = exampleServiceDo}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler
                                   (HsGRPC.MethodName "/example.ExampleService/Do")
                                   (HsGRPC.convertGeneratedServerHandler exampleServiceDo))],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger})
 
exampleServiceClient ::
                       HsGRPC.Client ->
                         Hs.IO (ExampleService HsGRPC.ClientRequest HsGRPC.ClientResult)
exampleServiceClient client
  = (Hs.pure ExampleService) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/example.ExampleService/Do")))
 
data DoRequest = DoRequest{}
               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named DoRequest where
        nameOf _ = (Hs.fromString "DoRequest")
 
instance HsProtobuf.HasDefault DoRequest
 
instance HsProtobuf.Message DoRequest where
        encodeMessage _ DoRequest{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure DoRequest)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB DoRequest where
        toJSONPB (DoRequest) = (HsJSONPB.object [])
        toEncodingPB (DoRequest) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB DoRequest where
        parseJSONPB
          = (HsJSONPB.withObject "DoRequest" (\ obj -> (Hs.pure DoRequest)))
 
instance HsJSONPB.ToJSON DoRequest where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON DoRequest where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema DoRequest where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "DoRequest",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})
 
data DoResponse = DoResponse{}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named DoResponse where
        nameOf _ = (Hs.fromString "DoResponse")
 
instance HsProtobuf.HasDefault DoResponse
 
instance HsProtobuf.Message DoResponse where
        encodeMessage _ DoResponse{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure DoResponse)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB DoResponse where
        toJSONPB (DoResponse) = (HsJSONPB.object [])
        toEncodingPB (DoResponse) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB DoResponse where
        parseJSONPB
          = (HsJSONPB.withObject "DoResponse"
               (\ obj -> (Hs.pure DoResponse)))
 
instance HsJSONPB.ToJSON DoResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON DoResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema DoResponse where
        declareNamedSchema _
          = do Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "DoResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList []}})